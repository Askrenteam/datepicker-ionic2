import { ElementRef, EventEmitter, AfterViewChecked } from '@angular/core';
import { DateService } from './datepicker.service';
export declare class DatePickerComponent implements AfterViewChecked {
    DatepickerService: DateService;
    dayscroll: ElementRef;
    yearscroll: ElementRef;
    mode: 'calendar' | undefined;
    type: 'date' | 'string' | 'year' | 'month' | 'calendar';
    today: Date;
    selectedDate: Date;
    tempDate: Date;
    dateList: Date[];
    cols: number[];
    rows: number[];
    weekdays: string[];
    months: string[];
    date: Date;
    min: Date;
    max: Date;
    callback: EventEmitter<string | Date>;
    hClasses: any[];
    dClasses: any[];
    full: boolean;
    constructor(DatepickerService: DateService);
    initialize(): void;
    getDaysOfWeek(): string[];
    ngAfterViewChecked(): void;
    getMonths(): string[];
    getYears(): Date[];
    createDateList(selectedDate: Date): void;
    getDate(row: number, col: number): Date;
    isDefined(date: Date | string): boolean;
    isDisabled(date: Date): boolean;
    isActualDate(date: Date): boolean;
    isActualMonth(month: number): boolean;
    isActualYear(year: number): boolean;
    isSelectedDate(date: Date): boolean;
    isSelectedMonth(month: number): boolean;
    isSelectedYear(year: number): boolean;
    changeType(val: 'date' | 'string' | 'year' | 'month' | 'calendar'): void;
    showType(val: 'date' | 'string' | 'year' | 'month' | 'calendar'): boolean;
    selectDate(date: Date): void;
    selectMonth(month: number): void;
    selectYear(year: any): void;
    getSelectedWeekday(): string;
    getSelectedMonth(): string;
    getTempMonth(): string;
    getTempYear(): number;
    onCancel(e: any): void;
    onDone(e: any): void;
    selectMonthOrYear(): void;
    limitTo(arr: Array<string> | string, limit: number): Array<string> | string;
    getMonthRows(): {}[];
    nextMonth(): void;
    prevMonth(): void;
}
